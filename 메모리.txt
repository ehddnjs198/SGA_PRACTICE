/*
1. 코드영역
- 실행할 코드가 저장되는 메모리 공간이라고 부를수 있다.
	CPU는 코드 영역에 저장된 명령문들을 하나씩 가져와서 실행을 한다

	※ 코드영역 자체는 운영체제에서 관리가 되기때문에 직접적으로 제어를 할수가 없다.

2. 스택 영역
- 지역 변수와 매개변수가 할당, 선언된 함수를 빠져 나가면 소멸이 이루어지는 영역
- 시스템에 의해서 의해서 관리되는 영역

3. 힙 영역
- 데이터 영역과 스택영여엑 할당되는 변수들은 생성과 소멸이 정해져 있다.
 프로그래머가 기본적으로 원하는 시점에 변수를 할당하고 소멸할 수 있는 영역이 바로 힙영역

 ※ 프로그래머가 직접 메모리 할당을 하기 때문에 프로그래머가 직접 소멸을 시켜야 한다(!!)
   소멸을 안시켰을때 메모리 계속 남아있다.(기정사실)-> 메모리 관리에 매우 좋지 않다.
   하지만 프로그램이 종료되는 계속 남아 있느냐?..? 그건 아니고 프로그램이 종료 되면 소멸된다.
   
   - 프로그래머에 의해서 관리되는 영역


4. 데이터 영역
- 전역변수와 static으로 선언되는 static 변수가 할당되는 영역
- enum하고 구조체 도 보통 메인함수 밖에 빼서
프로그램 시작과 동시에 메모리 공간에 할당이 되며 프로그램 종료시 까지 남아있는 특성이 있다.


	힙에 메모리를 할당하는 영역
	- 동적 할당(Dynamic Allocation) -
	- 프로그램을 작성할 때 메모리 필요량을 지정하는 정적 할당과는 달리 실행중에 필요한 만큼의 메모리를 할당하는 기법

	- 기본적으로 동적 할당된 메모리는 이름이 없는 변수다

	- 동적할당시 주의점
	- 동적할당을 해두면 메모리에 올려진 상태로 유지가 된다.
	  때문에 동적할당을 해놓고 다 쓰면 반드시 파괴해야 한다.

	- 동적할당을 쓰는 이유
	- 지역변수도 아니고 전역변수도 아닌 변수가 필요한 경우가 있다.
	  함수가 매번 호출될때마다 새롭게 할당되고 또 함수를 빠져나가도 유지되는 변수가 바로 그것!
	  지역 변수를 쓰자니 함수는 끝나면 소멸되어버리고, 전역 변수를 쓰자니 이전의 갑승ㄹ 덮어버리기 때문
	 
	- 만약 최대 100개의 변수를 사용한다고 했을때 우리는 정적으로 100개를 미리 할당시켜놔야 하지만 
	  40개의 데이터밖에 들어오지 않는다면 60개는 낭비가 된 상황이다
	  그래서 메모리 관리를 위해서 들어오는 족족 메모리를 할당하는 기법이 바로 동적할당
*/