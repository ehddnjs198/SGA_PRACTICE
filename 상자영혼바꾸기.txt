#include <Windows.h>
#include<string>
#include<iostream>

using namespace std;

// - 전역변수 -
//인스턴스: 윈도우OS가 현재 실행되고 있는 프로그램을 확인하기 위한 값
//같은 프로그램이면 같은 인스턴스값을 가진다
HINSTANCE _hInstance;

//윈도우 핸들: 윈도우창
HWND _hWnd;


//윈도우 타이틀
LPTSTR _lpszClass = TEXT("Window API");

//함수전방 선언
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);


//hInstance: 프로그램 인스턴스 핸들
//hPrevInstance: 이전에 실행된 인스턴스 핸들
//lpszCmdParam: 명령형으로 입력된 프로그램 인수
//nCmdShow: 프로그램이 시작될 형태 (최소화 or 보통 크기등등)
int APIENTRY WinMain(HINSTANCE hInstance,
	HINSTANCE hPrevInstance,
	LPSTR lpszCmdParam,
	int nCmdShow)
{
	//인스턴스를 전역변수에 담는다
	_hInstance = hInstance;


	if (AllocConsole()) {
		freopen("CONIN$", "rb", stdin);
		freopen("CONOUT$", "wb", stdout);
		freopen("CONOUT$", "wb", stderr);
	}

	//윈메인의 역할
	//1. 윈도우 창을 세팅후 화면에 띄우기	
	//└─ 4가지를 모두 처리해야 화면에 창이 뜬다
	//2. 메세지 루프

	//WNDCLASS: 윈도우 창의 정보를 저장하기 위한 구조체
	//윈도우창 구조체 선언 및 초기화
	WNDCLASS wndClass;
	wndClass.cbClsExtra = 0;									   //클래스 여분 메모리
	wndClass.cbWndExtra = 0;									   //윈도우 여분 메모리
	wndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);  //백그라운드
	wndClass.hCursor = LoadCursor(NULL, IDC_ARROW);				   //마우스 커서
	wndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);			   //아이콘
	wndClass.hInstance = hInstance;								   //인스턴스
	wndClass.lpfnWndProc = (WNDPROC)WndProc;					   //윈도우 프로시져
	wndClass.lpszClassName = _lpszClass;						   //클래스 이름
	wndClass.lpszMenuName = NULL;								   //메뉴이름
	wndClass.style = CS_HREDRAW | CS_VREDRAW;					   //윈도우 스타일

	//윈도우 클래스 등록
	RegisterClass(&wndClass);

	//화면에 보여줄 윈도우 창을 생성
	_hWnd = CreateWindow(
		_lpszClass,				//윈도우 클래스의 이름
		_lpszClass,				//윈도우 타이틀바 이름
		WS_OVERLAPPEDWINDOW,	//윈도우 스타일
		0,					//윈도우 화면 X좌표
		0,					//윈도우 화면 Y좌표
		600,					//윈도우 화면 가로크기
		600,					//윈도우 화면 세로크기
		NULL,					//부모 윈도우
		(HMENU)NULL,			//메뉴핸들
		hInstance,				//인스턴스 지정
		NULL);					//윈도우의 자식 윈도우를 생성하면 지정하고 그렇지 않으면 NULL
								//(필요에 의해서 사용하지만 지금은 NULL)


	//화면에 윈도우창 보여주기
	ShowWindow(_hWnd, nCmdShow);

	//MSG: 운영체제에서 발생하는 메세지 정보를 저장하기 위한 구조체
	MSG message;

	//메세지 루프
	//GetMessage: 메세지를 꺼내올 수 있을때까지 멈춰있는 함수
	//PeekMessage: 메세지가 없더라도 리턴되는 함수

	//게임용
	/*
	while (true)
	{
		if (PeekMessage(&message, NULL, 0, 0, PM_REMOVE))
		{
			if (message.message == WM_QUIT) break;
			TranslateMessage(&message);
			DispatchMessage(&message);
		}
	}
	*/

	//TranslateMessage: 키보드의 입력 메세지 처리를 담당
	//입력된 키가 문자키인지 확인후 대문자 혹은 소문자, 한글, 
	//영문인지에 대한 WM_CHAR 메세지를 발생 시킨다

	//DispatchMessage: 윈도우 프로시져에서 전달된 메세지를 
	//실제 윈도우로 전달해준다

	//일반 프로그래밍용
	while (GetMessage(&message, 0, 0, 0))
	{
		TranslateMessage(&message);
		DispatchMessage(&message);
	}

	return message.wParam;
}

//윈도우 프로시져: 메세지를 운영체제에 전달
//강제로 운영체제가 호출해준다

//hWnd: 어느 윈도우에서 발생한 메세지인지 구분
//iMessage: 메세지 구분 번호
//wParam: unsigned int 마우스 버튼의 상태, 키보드 조합키의 상태를 전달
//lParam: unsigned long 마우스 클릭 좌표를 전달

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	HDC hdc;		  //핸들DC 
	PAINTSTRUCT ps;   //페인트구조체

	static RECT rc = { 100,100,200,200 };
	static RECT rc2 = { 300,300,400,400 };

	static RECT src = { 130,130,180,180 };

	static bool cont = false;

	static bool right = false;
	static bool left = false;
	static bool top = false;
	static bool bottom = false;

	static bool right2 = false;
	static bool left2 = false;
	static bool top2 = false;
	static bool bottom2 = false;

	static bool sright = false;
	static bool sleft = false;
	static bool stop = false;
	static bool sbottom = false;

	static bool sright2 = false;
	static bool sleft2 = false;
	static bool stop2 = false;
	static bool sbottom2 = false;

	right = rc.right == rc2.left ? true : false;
	left = rc.left == rc2.right ? true : false;
	top = rc.top == rc2.bottom ? true : false;
	bottom = rc.bottom == rc2.top ? true : false;

	right2 = rc2.right == rc.left ? true : false;
	left2 = rc2.left == rc.right ? true : false;
	top2 = rc2.top == rc.bottom ? true : false;
	bottom2 = rc2.bottom == rc.top ? true : false;

	sright = rc.right == src.right ? true : false;
	sleft = rc.left == src.left ? true : false;
	stop = rc.top == src.top ? true : false;
	sbottom = rc.bottom == src.bottom ? true : false;

	sright2 = rc2.right == src.right ? true : false;
	sleft2 = rc2.left == src.left ? true : false;
	stop2 = rc2.top == src.top ? true : false;
	sbottom2 = rc2.bottom == src.bottom ? true : false;

	switch (iMessage)
	{
	case WM_CREATE: //생성자

		break;

	case WM_PAINT:	//출력에 관한 모든것을 담당한다(문자, 그림, 도형등등 화면에 보이는 모든것)
		hdc = BeginPaint(hWnd, &ps);
		Rectangle(hdc, rc.left, rc.top, rc.right, rc.bottom);
		Rectangle(hdc, rc2.left, rc2.top, rc2.right, rc2.bottom);
		Rectangle(hdc, src.left, src.top, src.right, src.bottom);

		//EndPaint(_hWnd, &ps);
	case WM_KEYDOWN:
		switch (wParam)
		{
		case VK_LEFT:
			//cout << rc.left << endl;
			if (rc.left != 0)
			{
				if (!cont)
				{
					rc.left -= 10;
					rc.right -= 10;
				}
				else
				{
					rc2.left -= 10;
					rc2.right -= 10;
				}

			}

			if (!cont)
			{
				if (left && rc.bottom > rc2.top && rc.top < rc2.bottom)
				{
					rc2.left -= 10;
					rc2.right -= 10;

					src.top = rc2.top + 20;
					src.bottom = rc2.top + 70;
					src.right = rc2.right - 20;
					src.left = rc2.right - 70;
					cont = true;

				}
			}
			else
			{
				if (left2 && rc2.bottom > rc.top && rc2.top < rc.bottom)
				{
					rc.left -= 10;
					rc.right -= 10;

					src.top = rc.top + 20;
					src.bottom = rc.top + 70;
					src.right = rc.right - 20;
					src.left = rc.right - 70;
					cont = false;
				}
			}

			//작은상자 컨털
			if (sright && rc.bottom >= src.bottom && rc.top <= src.top)
			{
				src.left -= 10;
				src.right -= 10;
			}

			//작은상자 컨털
			if (sright2 && rc2.bottom >= src.bottom && rc2.top <= src.top)
			{
				src.left -= 10;
				src.right -= 10;
			}

			break;
		case VK_RIGHT:
			if (rc.right != 580)
			{
				if (!cont)
				{
					rc.right += 10;
					rc.left += 10;
				}
				else
				{
					rc2.right += 10;
					rc2.left += 10;
				}

			}

			if (!cont)
			{
				if (right && rc.bottom > rc2.top && rc.top < rc2.bottom)
				{
					rc2.left += 10;
					rc2.right += 10;

					src.top = rc2.top + 20;
					src.bottom = rc2.top + 70;
					src.right = rc2.right - 20;
					src.left = rc2.right - 70;
					cont = true;
				}
			}
			else
			{
				if (right && rc2.bottom > rc.top && rc2.top < rc.bottom)
				{
					rc.left += 10;
					rc.right += 10;

					src.top = rc.top + 20;
					src.bottom = rc.top + 70;
					src.right = rc.right - 20;
					src.left = rc.right - 70;
					cont = false;
				}
			}


			//작은상자 컨털
			if (sleft && rc.bottom >= src.bottom && rc.top <= src.top)
			{
				src.left += 10;
				src.right += 10;
			}

			//작은상자 컨털
			if (sleft2 && rc2.bottom >= src.bottom && rc2.top <= src.top)
			{
				src.left += 10;
				src.right += 10;
			}
			break;

		case VK_UP:

			if (rc.top != 0)
			{
				if (!cont)
				{
					rc.top -= 10;
					rc.bottom -= 10;
				}
				else
				{
					rc2.top -= 10;
					rc2.bottom -= 10;
				}
			}

			if (!cont)
			{
				if (top && rc.right > rc2.left && rc.left < rc2.right)
				{
					rc2.top -= 10;
					rc2.bottom -= 10;

					cont = true;

					src.top = rc2.top + 20;
					src.bottom = rc2.top + 70;
					src.right = rc2.right - 20;
					src.left = rc2.right - 70;
				}
			}
			else
			{
				if (top2 && rc2.right > rc.left && rc2.left < rc.right)
				{
					rc.top -= 10;
					rc.bottom -= 10;

					src.top = rc.top + 20;
					src.bottom = rc.top + 70;
					src.right = rc.right - 20;
					src.left = rc.right - 70;

					cont = false;
				}
			}


					//작은상자 컨털
			if (sbottom && rc.right >= src.right && rc.left <= src.left)
			{	
				src.top -= 10;
				src.bottom -= 10;
			}

			//작은상자 컨털
			if (sbottom2 && rc2.right >= src.right && rc2.left <= src.left)
			{
				src.top -= 10;
				src.bottom -= 10;
			}


			break;
		case VK_DOWN:
			if (rc.top != 460)
			{
				if (!cont)
				{
					rc.bottom += 10;
					rc.top += 10;
				}
				else
				{
					rc2.bottom += 10;
					rc2.top += 10;
				}
				
			}

			if (!cont)
			{
				if (bottom && rc.right > rc2.left && rc.left < rc2.right)
				{
					rc2.top += 10;
					rc2.bottom += 10;
					
					src.top = rc2.top + 20;
					src.bottom = rc2.top + 70;
					src.right = rc2.right - 20;
					src.left = rc2.right - 70;
					cont = true;

				}
			}
			else
			{
				if (bottom2 && rc2.right > rc.left && rc2.left < rc.right)
				{
					rc.top += 10;
					rc.bottom += 10;

					src.top = rc.top + 20;
					src.bottom = rc.top + 70;
					src.right = rc.right - 20;
					src.left = rc.right - 70;
					cont = false;
				}
			}

			//작은상자 컨털
			if (stop && rc.right >= src.right && rc.left <= src.left)
			{
				src.top += 10;
				src.bottom += 10;
			}
			//작은상자 컨털
			if (stop2 && rc2.right >= src.right && rc2.left <= src.left)
			{
				src.top += 10;
				src.bottom += 10;
			}

			break;
		}
		InvalidateRect(_hWnd, NULL, TRUE);
		return 0;

		break;
	case WM_DESTROY:	//소멸자
		PostQuitMessage(0);
		return 0;
	}

	//윈도우 프로시져에서 처리되지 않은 나머지 메세지를 처리해준다
	return (DefWindowProc(hWnd, iMessage, wParam, lParam));
}

